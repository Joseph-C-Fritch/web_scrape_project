)
))
## server.R ##
server <- shinyServer(function(input, output, session) {
})
shinyApp(ui, server)
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
library(shinydashboard)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output, session) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output, session) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
# create variable with colnames as choice
choice <- colnames(state_stat)[-1]
library(shinydashboard)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output, session) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
library(shinydashboard)
library(googleVis)
library(ggplot2)
library(dplyr)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
library(shinydashboard)
library(googleVis)
library(ggplot2)
library(dplyr)
library(leaflet)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
## global.R ##
# convert matrix to dataframe
state_stat <- data.frame(state.name = rownames(state.x77), state.x77)
# remove row names
rownames(state_stat) <- NULL
# create variable with colnames as choice
choice <- colnames(state_stat)[-1]
library(shinydashboard)
library(googleVis)
library(ggplot2)
library(dplyr)
library(leaflet)
ui <- fluidPage(shinyUI(
dashboardPage(
dashboardHeader(title = 'this is my title'),
dashboardSidebar(
sidebarUserPanel(
name = 'david',
subtitle = 'this is my subtitle',
),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
# gvisGeoChart
fluidRow(box(htmlOutput("map")),
# gvisHistoGram
box(htmlOutput("hist")))),
tabItem(tabName = "data",
# datatable
fluidRow(box(DT::dataTableOutput("table"))))
))
)
))
server <- function(input, output) {
output$map <- renderGvis({
gvisGeoChart(state_stat, "state.name", input$selected,
options=list(region="US", displayMode="regions",
resolution="provinces",
width="auto", height="auto"))
# using width="auto" and height="auto" to
# automatically adjust the map size
})
# show histogram using googleVis
output$hist <- renderGvis(
gvisHistogram(state_stat[,input$selected, drop=FALSE]))
output$table <- DT::renderDataTable({
datatable(state_stat, rownames=FALSE) %>%
formatStyle(input$selected,
background="skyblue", fontWeight='bold')
# Highlight selected column using formatStyle
})
}
shinyApp(ui, server)
runApp('~/NYCDSA/Shiny/Advanced_Shiny_Demo.R')
runApp('~/NYCDSA/Shiny/Advanced_Shiny_Demo.R')
runApp('~/NYCDSA/Shiny/Advanced_Shiny_Demo.R')
#(1)
library(ggplot2)
library(dplyr)
data(cars)
g = ggplot(data = cars, aes(x = speed, y = dist))
g + geom_point()
#(2)
g + geom_point() +
xlab('Speed (mpg)') +
ylab('Stopping Distance (ft)') +
ggtitle('Stopping Distance as a Function of Speed')
#(3)
g + geom_point(col ="red", pch=17) +
xlab('Speed (mpg)') +
ylab('Stopping Distance (ft)') +
ggtitle('Stopping Distance as a Function of Speed')
#(1)
library(ggplot2)
library(dplyr)
data(cars)
g = ggplot(data = cars, aes(x = speed, y = dist))
g + geom_point()
#(2)
g + geom_point() +
xlab('Speed (mpg)') +
ylab('Stopping Distance (ft)') +
ggtitle('Stopping Distance as a Function of Speed')
#(3)
g + geom_point(col ="red", pch=17) +
xlab('Speed (mpg)') +
ylab('Stopping Distance (ft)') +
ggtitle('Stopping Distance as a Function of Speed')
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#(1)
knicks = data%>%
mutate(., win_loss_bin = ifelse(win == "W", 1, 0))%>%
group_by(., season)%>%
summarise(., ratio = sum(win_loss_bin)/NROW(win_loss_bin))
g = ggplot(data = knicks, aes(x = season, y = ratio))
g + geom_bar(stat = 'identity', position = 'dodge')
#(2)
knicks = data%>%
mutate(., win_loss_bin = ifelse(win == "W", 1, 0))%>%
group_by(., season, visiting)%>%
summarise(., ratio = sum(win_loss_bin)/NROW(win_loss_bin))
g = ggplot(data = knicks, aes(x = season, y = ratio, fill = visiting))
g + geom_bar(stat = 'identity', position = 'dodge')
#(3)
knicks = data%>%
group_by(., season)
knicks
g <- ggplot(data = knicks, aes(x = points))
g + geom_histogram(binwidth = 5) + facet_wrap( ~ season)
library(dplyr)
bnames = read.csv("C:/Users/Joe Fritch/Documents/NYCDSA/Data/names/yob2014.csv")
#(1)
gnames = unique(bnames[grep('G',bnames$name),])
sum(gnames$number)
gnames
#(2)
knames = bnames[grep('K',bnames$name),]
sum(knames$number)
knames
bnames = read.csv("C:/Users/Joe Fritch/Documents/NYCDSA/Data/names/yob2014.csv")
#(1)
gnames = unique(bnames[grep('G',bnames$name),])
sum(gnames$number)
#(2)
knames = bnames[grep('K',bnames$name),]
sum(knames$number)
#(1)
library(dplyr)
bnames = read.csv("C:/Users/Joe Fritch/Documents/NYCDSA/Data/names/yob2014.csv")
#(1)
gnames = unique(bnames[grep('G',bnames$name),])
sum(gnames$number)
#(2)
knames = bnames[grep('K',bnames$name),]
sum(knames$number)
m_names = bnames%>%
filter(., sex == 'M')
group_by(., name)%>%
summarize(., total = sum(number))
m_names
f_names = bnames%>%
filter(., sex == 'F')
group_by(., name)%>%
summarize(., total = sum(number))
f_names
mf_names = inner_join(m_names,f_names,by = 'name')
nrow(mf_names)
library(shiny); runApp('~/NYCDSA/Projects/Shiny_Project/Lirr_Shiny_Working.R')
library(shiny); runApp('~/NYCDSA/Projects/Scraping_Project/xrp_shiny_working.R')
library(dplyr)
library(ggplot2)
library(wordcloud2)
library(tm)
library(knitr)
df3 <- readr::read_csv("./df3.csv")
setwd("~/NYCDSA/Projects/Scraping_Project")
library(dplyr)
library(ggplot2)
library(wordcloud2)
library(tm)
library(knitr)
df3 <- readr::read_csv("./df3.csv")
View(df3)
df4 <- readr::read_csv("./df4.csv")
View(df4)
df5 = left_join(df3,df4, by = 'week')
View(df5)
df7 = df3%>%
filter(., weekly_price_change > 0)
df7
df7 = df5%>%
filter(., weekly_price_change > 0)
df7
View(df7)
write.csv(df7,file = 'df7.csv')
write.csv(df7,file = 'df7.csv',fileEncoding = 'UTF-8')
View(df7)
docs <- Corpus(VectorSource(df7$text))
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
View(d)
